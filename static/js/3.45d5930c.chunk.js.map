{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","activeClassName","activeLink","alt","src","avatar","name","Message","message","text","maxLength50","maxLengthCreator","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsElements","dialogs","map","d","messageElements","messages","m","isAuth","dialogItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","auth","compose","connect","messagesPage","newMessageText","dispatch","sendMessageActionCreator","Component","RedirectComponent","this","React"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,4B,oBCA3GD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,WAAa,iC,oBCAnED,EAAOC,QAAU,CAAC,QAAU,2B,wHCgBbC,EAdI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,eAAC,IAAD,CAASC,GAAIN,EAAMO,gBAAiBJ,IAAEK,WAAtC,UACI,qBAAKC,IAAI,aAAaC,IAAKX,EAAMY,SAChCZ,EAAMa,W,kBCDRC,EARC,SAACd,GACb,OACI,qBAAKG,UAAWC,IAAEW,QAAlB,SACKf,EAAMgB,Q,yCCIbC,EAAcC,YAAiB,IAoB/BC,EAAkBC,YAAU,CAC9BC,KAAM,yBADcD,EAlBL,SAACpB,GAChB,OACI,uBAAMsB,SAAUtB,EAAMuB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,YAAY,qBACZd,KAAK,iBACLe,SAAU,CAACC,IAAUZ,OAG7B,8BACI,kDAgEDa,EAtDC,SAAC9B,GAIb,IAAI+B,EAAkB/B,EAAMgC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CACzChC,GAAIgC,EAAEhC,GAENW,KAAMqB,EAAErB,KACRD,OAAQsB,EAAEtB,QAFLsB,EAAEhC,OAKPiC,EAAkBnC,EAAMoC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAC1CnC,GAAImC,EAAEnC,GAENc,KAAMqB,EAAErB,MADHqB,EAAEnC,OAwBX,OAAKF,EAAMsC,OAGP,sBAAKnC,UAAWC,IAAE4B,QAAlB,UACI,qBAAK7B,UAAWC,IAAEmC,YAAlB,SACKR,IAEL,sBAAK5B,UAAWC,IAAEgC,SAAlB,UACI,8BAAMD,IACN,cAAChB,EAAD,CAAiBG,SAbP,SAACkB,GACnBxC,EAAMyC,YAAYD,EAAOE,yBAGH,cAAC,IAAD,CAAUnC,GAAI,Y,+CClExCoC,EAA6B,SAACC,GAAD,MAAY,CACzCN,OAAQM,EAAMC,KAAKP,S,OCwDRQ,sBACXC,aAxBkB,SAACH,GACnB,MAAO,CACHR,SAAUQ,EAAMI,aAAaZ,SAC7Ba,eAAgBL,EAAMI,aAAaC,eACnCjB,QAASY,EAAMI,aAAahB,YAIX,SAACkB,GACtB,MAAO,CACHT,YAAa,SAACC,GACVQ,EAASC,YAAyBT,UDzCd,SAACU,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAIC,KAAKtD,MAAMsC,OAER,cAACc,EAAD,eAAeE,KAAKtD,QAFG,cAAC,IAAD,CAAUO,GAAI,eAHT,GACXgD,IAAMH,WAYtC,OAFqCL,YAAQJ,EAARI,CAAoCM,KC0C9DP,CAGbhB","file":"static/js/3.45d5930c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Mw_G\",\"dialogItems\":\"Dialogs_dialogItems__Al_2_\",\"messages\":\"Dialogs_messages__1M4hR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__318DV\",\"activeLink\":\"DialogItem_activeLink__7Ot_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__G9VU_\"};","import s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>\r\n                <img alt='avatar-img' src={props.avatar}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import s from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst DialogForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    placeholder=\"Enter your message\"\r\n                    name='newMessageBody'\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst DialogReduxForm = reduxForm({\r\n    form: 'dialogsAddMessageForm'\r\n})(DialogForm)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    // let state = props.messagesPage;\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem\r\n        id={d.id}\r\n        key={d.id}\r\n        name={d.name}\r\n        avatar={d.avatar}\r\n    />)\r\n\r\n    let messageElements = props.messages.map(m => <Message\r\n        id={m.id}\r\n        key={m.id}\r\n        text={m.text}\r\n    />)\r\n\r\n    // let newMessageElement = React.createRef();\r\n\r\n    // let sendMessage = () => {\r\n    //     // let text = e.target.value;\r\n    //     props.sendMessage();\r\n    //     // props.dispatch(sendMessageActionCreator())\r\n    //     // newMessageElement.current.value = '';\r\n    //     //L33 - строка для обнуления поля после ввода - не актуально\r\n    // }\r\n    //\r\n    // let onMessageChange = (e) => {\r\n    //     let text = e.target.value;\r\n    //     props.updateNewMessageText(text);\r\n    //     // props.dispatch(updateNewMessageTextActionCreator(text));\r\n    // }\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <DialogReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n// 24L - выносим все данные в отдельные объекты, готовим для использования MAP\r\n// 25L - мапим данные, вносим сокращения 'm = message, d = dialog' для удобства\r\n// 26L - переносим все данные (dialogs, messages, posts) на уровень выше, для начала в индекс\r\n// и через пропсы прокидываем в нужные компоненты\r\n// 33L - newMessageElement.current.value = ''; - строка для обнуления поля после ввода - актуальна только\r\n// для этого урока, дальшее от нее избавляемся и зануляем только через обращение к state\r\n\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'} />;\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {sendMessageActionCreator, updateNewMessageTextActionCreator} from \"../../Redux/messagesReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n// import StoreContext from \"../../StoreContext\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n// const DialogsContainer = () => {\r\n//\r\n//     // let state = props.store.getState().messagesPage;\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {store => {\r\n//                 // let state = store.getState().messagesPage;\r\n//\r\n//                 let onSendMessage = () => {\r\n//                     store.dispatch(sendMessageActionCreator())\r\n//                 };\r\n//\r\n//                 let onMessageChange = (text) => {\r\n//                     store.dispatch(updateNewMessageTextActionCreator(text));\r\n//                 };\r\n//\r\n//                 return <Dialogs\r\n//                     sendMessage={onSendMessage}\r\n//                     updateNewMessageText={onMessageChange}\r\n//                     messages={store.getState().messagesPage.messages}\r\n//                     newMessageText={store.getState().messagesPage.newMessageText}\r\n//                     dialogs={store.getState().messagesPage.dialogs}\r\n//                 />\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.messagesPage.messages,\r\n        newMessageText: state.messagesPage.newMessageText,\r\n        dialogs: state.messagesPage.dialogs,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageActionCreator(newMessageBody));\r\n        },\r\n        // updateNewMessageText: (text) => {\r\n        //     dispatch(updateNewMessageTextActionCreator(text));\r\n        // }\r\n    }\r\n}\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n// 24L - выносим все данные в отдельные объекты, готовим для использования MAP\r\n// 25L - мапим данные, вносим сокращения 'm = message, d = dialog' для удобства\r\n// 26L - переносим все данные (dialogs, messages, posts) на уровень выше, для начала в индекс\r\n// и через пропсы прокидываем в нужные компоненты\r\n// 33L - newMessageElement.current.value = ''; - строка для обнуления поля после ввода - актуальна только\r\n// для этого урока, дальшее от нее избавляемся и зануляем только через обращение к state\r\n\r\n\r\n"],"sourceRoot":""}