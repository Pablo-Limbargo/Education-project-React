{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","s","descriptionBlock","alt","src","photos","large","userPhoto","mainPhoto","type","target","files","length","fullName","aboutMe","href","contacts","vk","twitter","instagram","lookingForAJobDescription","Post","posts","item","message","likeCount","maxLength10","maxLengthCreator","MyPostsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","MyPosts","React","memo","console","log","postElements","reverse","map","p","id","postArea","values","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,UAAY,iC,oBCAvFD,EAAOC,QAAU,CAAC,SAAW,0BAA0B,MAAQ,yB,oBCA/DD,EAAOC,QAAU,CAAC,KAAO,qB,sJCyCVC,EAxCgB,SAACC,GAE5B,MAA8BC,oBAAS,GAAvC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAA0BF,mBAASD,EAAMI,QAAzC,mBAAKA,EAAL,KAAaC,EAAb,KAEAC,qBAAW,WACPD,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeV,OACI,iCACMF,GACF,8BACI,sBAAMK,cAjBG,WACjBJ,GAAY,IAgBJ,SAAoCH,EAAMI,QAAU,YAGvDF,GACD,8BACI,uBAAOM,WAAW,EAAMC,OAlBT,WACvBN,GAAY,GACZH,EAAMU,aAAaN,IAgByCO,MAAOP,EAAQQ,SAbxD,SAACC,GACpBR,EAAUQ,EAAEC,cAAcH,gBCiBnBI,EAjCK,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,QAASZ,EAA8C,EAA9CA,OAAQM,EAAsC,EAAtCA,aAAcO,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UAC1D,IAAKF,EACD,OAAO,cAACG,EAAA,EAAD,IASX,OACI,gCACI,wBAIA,sBAAKC,UAAWC,IAAEC,iBAAlB,UACI,qBAAKC,IAAI,cAAcC,IAAKR,EAAQS,OAAOC,OAASC,IAAWP,UAAWC,IAAEO,YAC3EX,GAAW,uBAAOY,KAAM,OAAQjB,SAdjB,SAACC,GACrBA,EAAEiB,OAAOC,MAAMC,QAChBd,EAAUL,EAAEiB,OAAOC,MAAM,OAapB,cAAC,EAAD,CAAwB3B,OAAQA,EAAQM,aAAcA,IACtD,6CAAgBM,EAAQiB,YACxB,4CAAejB,EAAQkB,WACvB,uCAAS,mBAAGC,KAAK,wBAAR,SAAiCnB,EAAQoB,SAASC,QAC3D,4CAAc,mBAAGF,KAAK,2BAAR,SAAoCnB,EAAQoB,SAASE,aACnE,8CAAgB,mBAAGH,KAAK,4BAAR,SAAqCnB,EAAQoB,SAASG,eACtE,6CAAgBvB,EAAQwB,oC,oDCdzBC,EAfF,SAACzC,GACV,OACI,qBAAKoB,UAAWC,IAAEqB,MAAlB,SACI,sBAAKtB,UAAWC,IAAEsB,KAAlB,UACI,qBAAKpB,IAAI,aAAaC,IAAI,6CACzBxB,EAAM4C,QACP,gCACI,wCADJ,IACuB5C,EAAM6C,mB,iCCFvCC,EAAcC,YAAiB,IAoB/BC,EAAmBC,YAAU,CAC/BC,KAAM,YADeD,EAlBL,SAACjD,GACjB,OACI,uBAAMmD,SAAUnD,EAAMoD,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,YAAY,kBACZC,UAAWC,IACXC,KAAK,cACLC,SAAU,CAACC,IAAUb,OAG7B,8BACI,sDAwDDc,EA9CCC,IAAMC,MAAK,SAAA9D,GACvB+D,QAAQC,IAAI,UACZ,IAIIC,EAAe,YAAIjE,EAAM0C,OACxBwB,UACAC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CACVxB,QAASwB,EAAExB,QACXyB,GAAID,EAAEC,GAENxB,UAAWuB,EAAEvB,WADRuB,EAAEC,OAsBX,OACI,sBAAKjD,UAAWC,IAAEiD,SAAlB,UACI,0CACA,8BACI,cAACtB,EAAD,CAAkBG,SAtBX,SAACoB,GAChBvE,EAAMwE,QAAQD,EAAOE,kBAuBjB,qBAAKrD,UAAWC,IAAEqB,MAAlB,SACKuB,U,QCZFS,EAFUC,aAnBH,SAACC,GACnB,MAAO,CACHlC,MAAOkC,EAAMC,YAAYnC,MACzBoC,YAAaF,EAAMC,YAAYC,gBAId,SAACC,GACtB,MAAO,CAKHP,QAAS,SAACC,GACNM,EAASC,YAAqBP,QAKjBE,CAA8Cf,GCrCxDqB,EAjBC,SAACjF,GACb,OACI,gCACI,cAAC,EAAD,CACIkB,UAAWlB,EAAMkB,UACjBD,QAASjB,EAAMiB,QACfD,QAAShB,EAAMgB,QACfZ,OAAQJ,EAAMI,OACdM,aAAcV,EAAMU,eAExB,cAAC,EAAD,Q,gBCNNwE,E,oKAEF,WACI,IAAIC,EAASC,KAAKpF,MAAMqF,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKpF,MAAMuF,mBAEhBH,KAAKpF,MAAMwF,QAAQC,KAAK,UAGhCL,KAAKpF,MAAM0F,eAAeP,GAC1BC,KAAKpF,MAAM2F,UAAUR,K,+BAGzB,WACIC,KAAKQ,mB,gCAGT,SAAmBC,EAAWC,EAAWC,GAClCX,KAAKpF,MAAMqF,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QAC5DC,KAAKQ,mB,oBAGT,WACI,OACI,cAAC,EAAD,2BACQR,KAAKpF,OADb,IAEIiB,SAAUmE,KAAKpF,MAAMqF,MAAMC,OAAOH,OAClCnE,QAASoE,KAAKpF,MAAMgB,QACpBZ,OAAQgF,KAAKpF,MAAMI,OACnBM,aAAc0E,KAAKpF,MAAMU,aACzBQ,UAAWkE,KAAKpF,MAAMkB,iB,GA/BP2C,IAAMmC,WA4CtBC,sBACXtB,aARkB,SAACC,GAAD,MAAY,CAC9B5D,QAAS4D,EAAMC,YAAY7D,QAC3BZ,OAAQwE,EAAMC,YAAYzE,OAC1BmF,iBAAkBX,EAAMsB,KAAKf,OAC7BgB,OAAQvB,EAAMsB,KAAKC,UAIM,CAACT,mBAAgBC,cAAWjF,iBAAcQ,gBACnEkF,IAFWH,CAIbf","file":"static/js/4.0f6caf87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__oQTNx\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1oXU2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postArea\":\"MyPosts_postArea__2FVZv\",\"posts\":\"MyPosts_posts__am03l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1qYIa\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={deactivateEditMode} value={status} onChange={onStatusChange}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/ava-no-image.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n           savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {/*<img alt='profile-img'*/}\r\n                {/*     src='https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg'/>*/}\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img alt='photo_large' src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <h3>Full Name: {profile.fullName}</h3>\r\n                <h3>About me: {profile.aboutMe}</h3>\r\n                <div>VK: <a href='https://vk.com/dimych'>{profile.contacts.vk}</a></div>\r\n                <div>twitter: <a href='https://twitter.com/@sdf'>{profile.contacts.twitter}</a></div>\r\n                <div>instagram: <a href='https://instagram.com/sds'>{profile.contacts.instagram}</a></div>\r\n                <p>Job status: {profile.lookingForAJobDescription}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img alt='avatar-img' src=\"https://html5css.ru/w3images/avatar2.png\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>Like</span> {props.likeCount}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPostsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder='Write your post'\r\n                    component={Textarea}\r\n                    name='newPostBody'\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostsReduxForm = reduxForm({\r\n    form: 'addPosts'\r\n})(MyPostsForm)\r\n\r\nconst MyPosts = React.memo(props => {\r\n    console.log('RENDER')\r\n    const onSubmit = (formData) => {\r\n        console.log(formData)\r\n    }\r\n\r\n    let postElements = [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post\r\n        message={p.message}\r\n        id={p.id}\r\n        key={p.id}\r\n        likeCount={p.likeCount}\r\n    />)\r\n\r\n    const addNewPost = (values) => {\r\n        props.addPost(values.newPostBody)\r\n    }\r\n\r\n    // let newPostElement = React.createRef();\r\n\r\n    // let onAddPost = () => {\r\n    //     //let text = newPostElement.current.value; - убираем эту строку, так как текст уже передан в state\r\n    //     props.addPost(); // - убираем text\r\n    //     // props.dispatch(addPostActionCreator());\r\n    //     //props.updateNewPostText('') - убираем зачистку строки из UI в BLL\r\n    // }\r\n    //\r\n    // let onPostChange = (e) => {\r\n    //     let text = e.target.value;\r\n    //     props.updateNewPostText(text);\r\n    // }\r\n\r\n    return (\r\n        <div className={s.postArea}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <MyPostsReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;\r\n\r\n// 31L - добавляем онклик на кнопку, в нее передаем калбэк функцию. Создаем новую переменную с криэйтРэф,\r\n// добавляем ее в текстарею и функцию калбек из которой берем текущее значение\r\n// 39L - выносим информацию из функций AddPost и onPostChange в state, создавая ActionCreator\r\n// 43L - создаем контейнерные компоненты вокруг основных, чтобы убрать из них всю связь со стейтом","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../Redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n// import StoreContext from \"../../../StoreContext\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// const MyPostsContainer = () => {\r\n//\r\n//     // let state = props.store.getState();\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {(store) => {\r\n//\r\n//                 let state = store.getState();\r\n//\r\n//                 let addPost = () => {\r\n//                     store.dispatch(addPostActionCreator());\r\n//                 }\r\n//\r\n//                 let onPostChange = (text) => {\r\n//                     let action = updateNewPostTextActionCreator(text);\r\n//                     store.dispatch(action);\r\n//\r\n//                 };\r\n//\r\n//                 return <MyPosts\r\n//                     updateNewPostText={onPostChange}\r\n//                     addPost={addPost}\r\n//                     posts={state.profilePage.posts}\r\n//                     newPostText={state.profilePage.newPostText}\r\n//                 />\r\n//             }\r\n//             }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // updateNewPostText: (text) => {\r\n        //     let action = updateNewPostTextActionCreator(text);\r\n        //     dispatch(action);\r\n        // },\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPostActionCreator(newPostBody));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n\r\n// 31L - добавляем онклик на кнопку, в нее передаем калбэк функцию. Создаем новую переменную с криэйтРэф,\r\n// добавляем ее в текстарею и функцию калбек из которой берем текущее значение\r\n// 39L - выносим информацию из функций AddPost и onPostChange в state, создавая ActionCreator","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer\r\n                // store={props.store}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../Redux/profileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId)\r\n        this.refreshProfile();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}